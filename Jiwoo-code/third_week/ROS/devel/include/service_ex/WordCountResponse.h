// Generated by gencpp from file service_ex/WordCountResponse.msg
// DO NOT EDIT!


#ifndef SERVICE_EX_MESSAGE_WORDCOUNTRESPONSE_H
#define SERVICE_EX_MESSAGE_WORDCOUNTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace service_ex
{
template <class ContainerAllocator>
struct WordCountResponse_
{
  typedef WordCountResponse_<ContainerAllocator> Type;

  WordCountResponse_()
    : z(0)  {
    }
  WordCountResponse_(const ContainerAllocator& _alloc)
    : z(0)  {
  (void)_alloc;
    }



   typedef uint32_t _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::service_ex::WordCountResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::service_ex::WordCountResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WordCountResponse_

typedef ::service_ex::WordCountResponse_<std::allocator<void> > WordCountResponse;

typedef boost::shared_ptr< ::service_ex::WordCountResponse > WordCountResponsePtr;
typedef boost::shared_ptr< ::service_ex::WordCountResponse const> WordCountResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::service_ex::WordCountResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::service_ex::WordCountResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::service_ex::WordCountResponse_<ContainerAllocator1> & lhs, const ::service_ex::WordCountResponse_<ContainerAllocator2> & rhs)
{
  return lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::service_ex::WordCountResponse_<ContainerAllocator1> & lhs, const ::service_ex::WordCountResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace service_ex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::service_ex::WordCountResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::service_ex::WordCountResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::service_ex::WordCountResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::service_ex::WordCountResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::service_ex::WordCountResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::service_ex::WordCountResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::service_ex::WordCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "afd4044726372c27eeace0df3a360adc";
  }

  static const char* value(const ::service_ex::WordCountResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xafd4044726372c27ULL;
  static const uint64_t static_value2 = 0xeeace0df3a360adcULL;
};

template<class ContainerAllocator>
struct DataType< ::service_ex::WordCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "service_ex/WordCountResponse";
  }

  static const char* value(const ::service_ex::WordCountResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::service_ex::WordCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 z\n"
"\n"
"\n"
;
  }

  static const char* value(const ::service_ex::WordCountResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::service_ex::WordCountResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WordCountResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::service_ex::WordCountResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::service_ex::WordCountResponse_<ContainerAllocator>& v)
  {
    s << indent << "z: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVICE_EX_MESSAGE_WORDCOUNTRESPONSE_H
